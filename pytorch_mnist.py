# -*- coding: utf-8 -*-
"""pytorch_mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YXmHoK4aMeWUlV8mxXUxZ9sN7DK3wpmr
"""

# Install PyTorch if needed in Colab
# !pip install torch torchvision

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# 1. Load MNIST Dataset
transform = transforms.ToTensor()

train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_data  = datasets.MNIST(root='./data', train=False, download=True, transform=transform)

train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader  = DataLoader(test_data, batch_size=1000, shuffle=False)

# 2. Define MLP using nn.Module
class MLP(nn.Module):
    def __init__(self):
        super(MLP, self).__init__()
        self.fc1 = nn.Linear(28*28, 128)   # input layer → hidden
        self.fc2 = nn.Linear(128, 64)      # hidden → hidden
        self.fc3 = nn.Linear(64, 10)       # hidden → output

    def forward(self, x):
        x = x.view(-1, 28*28)              # flatten image
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = MLP()
print(model)

# 3. Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 4. Training Loop
epochs = 3
for epoch in range(epochs):
    model.train()
    for data, target in train_loader:
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()   # Autograd computes gradients here
        optimizer.step()
    print(f"Epoch {epoch+1}, Loss: {loss.item():.4f}")

# 5. Evaluate on Test Set
model.eval()
correct, total = 0, 0
with torch.no_grad():
    for data, target in test_loader:
        output = model(data)
        _, predicted = torch.max(output, 1)
        total += target.size(0)
        correct += (predicted == target).sum().item()

print(f"Test Accuracy: {100 * correct / total:.2f}%")

# 6. Visualize Gradients with Autograd
sample_data, sample_target = next(iter(train_loader))
sample_data = sample_data[0].unsqueeze(0)   # take one image
sample_target = sample_target[0].unsqueeze(0)

# Forward pass
output = model(sample_data)
loss = criterion(output, sample_target)
loss.backward()

# Plot gradients of first layer
grads = model.fc1.weight.grad[0].view(28,28).detach()

plt.imshow(grads, cmap="hot")
plt.title("Gradient Visualization of First Layer (Autograd)")
plt.colorbar()
plt.show()

